generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "./generated-schema.json"
  keepRelationScalarFields = "true"
  includeRequiredFields    = "true"
  persistOriginalType      = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OWNER
  CUSTOMER
}

enum UserStatus {
  APPROVE
  APPROVED
}

enum BookStatus {
  APPROVE
  APPROVED
}

enum RentStatus {
  BORROWED
  RETURNED
}

model User {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  email       String     @unique
  username    String?
  phoneNumber String?
  password    String
  location    String
  wallet      Float?     @default(0.00)
  status      UserStatus @default(APPROVE)
  books       Book[]
  rentals     Rental[]
  roleId      Int
  role        Role       @relation(fields: [roleId], references: [id])
}

model Book {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  bookName      String     @unique
  author        String
  category      String
  quantity      Int
  rentPrice     Float
  coverPhotoUrl String?
  status        BookStatus @default(APPROVE)
  isAvailable   Boolean    @default(true)
  ownerId       Int
  owner         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rentals       Rental[]
}

model Rental {
  id              Int        @id @default(autoincrement())
  transactionDate DateTime   @default(now())
  status          RentStatus @default(BORROWED)
  quantity        Int
  rentPrice       Float
  returnDate      DateTime
  bookId          Int
  renterId        Int
  book            Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  renter          User       @relation(fields: [renterId], references: [id], onDelete: Cascade)
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  permissions RoleOnPermission[]
  users       User[]
}

model Permission {
  id         Int                @id @default(autoincrement())
  action     String
  subject    String
  conditions Json?
  roles      RoleOnPermission[]
}

model RoleOnPermission {
  id Int @id @default(autoincrement())

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}
